type Area {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  Name: String
  masjids(sort: String, limit: Int, start: Int, where: JSON): [Masjid]
}

type AreaAggregator {
  count: Int
  totalCount: Int
}

type AreaConnection {
  values: [Area]
  groupBy: AreaGroupBy
  aggregate: AreaAggregator
}

type AreaConnection_id {
  key: ID
  connection: AreaConnection
}

type AreaConnectionCreatedAt {
  key: DateTime
  connection: AreaConnection
}

type AreaConnectionId {
  key: ID
  connection: AreaConnection
}

type AreaConnectionName {
  key: String
  connection: AreaConnection
}

type AreaConnectionUpdatedAt {
  key: DateTime
  connection: AreaConnection
}

type AreaGroupBy {
  id: [AreaConnectionId]
  _id: [AreaConnection_id]
  createdAt: [AreaConnectionCreatedAt]
  updatedAt: [AreaConnectionUpdatedAt]
  Name: [AreaConnectionName]
}

input AreaInput {
  Name: String
  masjids: [ID]
}

input createAreaInput {
  data: AreaInput
}

type createAreaPayload {
  area: Area
}

input createFileInput {
  data: FileInput
}

type createFilePayload {
  file: UploadFile
}

input createMasjidInput {
  data: MasjidInput
}

type createMasjidPayload {
  masjid: Masjid
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format
outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for
representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input deleteAreaInput {
  where: InputID
}

type deleteAreaPayload {
  area: Area
}

input deleteFileInput {
  where: InputID
}

type deleteFilePayload {
  file: UploadFile
}

input deleteMasjidInput {
  where: InputID
}

type deleteMasjidPayload {
  masjid: Masjid
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editAreaInput {
  Name: String
  masjids: [ID]
}

input editFileInput {
  name: String
  hash: String
  sha256: String
  ext: String
  mime: String
  size: Float
  url: String
  provider: String
  provider_metadata: JSON
  related: [ID]
}

input editMasjidInput {
  Name: String
  Address: String
  area: ID
  Suburb: String
  FajrAthaan: String
  FajrSalaah: String
  ZuhrAthaan: String
  ZuhrSalaah: String
  AsrAthaan: String
  AsrSalaah: String
  MaghribAthaan: String
  MaghribSalaah: String
  EshaAthaan: String
  EshaSalaah: String
  JummahAthaan: String
  JummahKhutbah: String
  ZuhrAthaanSpecial: String
  ZuhrSalaahSpecial: String
  ZuhrLabelSpecial: String
  Notices: String
  PlusCode: String
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: Float!
  url: String!
  provider: String!
  provider_metadata: JSON
  related: [ID]
}

type ForgotPassword {
  ok: Boolean
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

type Masjid {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  Name: String!
  Address: String
  area: Area
  Suburb: String
  FajrAthaan: String
  FajrSalaah: String
  ZuhrAthaan: String
  ZuhrSalaah: String
  AsrAthaan: String
  AsrSalaah: String
  MaghribAthaan: String
  MaghribSalaah: String
  EshaAthaan: String
  EshaSalaah: String
  JummahAthaan: String
  JummahKhutbah: String
  ZuhrAthaanSpecial: String
  ZuhrSalaahSpecial: String
  ZuhrLabelSpecial: String
  Notices: String
  PlusCode: String
}

type MasjidAggregator {
  count: Int
  totalCount: Int
}

type MasjidConnection {
  values: [Masjid]
  groupBy: MasjidGroupBy
  aggregate: MasjidAggregator
}

type MasjidConnection_id {
  key: ID
  connection: MasjidConnection
}

type MasjidConnectionAddress {
  key: String
  connection: MasjidConnection
}

type MasjidConnectionArea {
  key: ID
  connection: MasjidConnection
}

type MasjidConnectionAsrAthaan {
  key: String
  connection: MasjidConnection
}

type MasjidConnectionAsrSalaah {
  key: String
  connection: MasjidConnection
}

type MasjidConnectionCreatedAt {
  key: DateTime
  connection: MasjidConnection
}

type MasjidConnectionEshaAthaan {
  key: String
  connection: MasjidConnection
}

type MasjidConnectionEshaSalaah {
  key: String
  connection: MasjidConnection
}

type MasjidConnectionFajrAthaan {
  key: String
  connection: MasjidConnection
}

type MasjidConnectionFajrSalaah {
  key: String
  connection: MasjidConnection
}

type MasjidConnectionId {
  key: ID
  connection: MasjidConnection
}

type MasjidConnectionJummahAthaan {
  key: String
  connection: MasjidConnection
}

type MasjidConnectionJummahKhutbah {
  key: String
  connection: MasjidConnection
}

type MasjidConnectionMaghribAthaan {
  key: String
  connection: MasjidConnection
}

type MasjidConnectionMaghribSalaah {
  key: String
  connection: MasjidConnection
}

type MasjidConnectionName {
  key: String
  connection: MasjidConnection
}

type MasjidConnectionNotices {
  key: String
  connection: MasjidConnection
}

type MasjidConnectionPlusCode {
  key: String
  connection: MasjidConnection
}

type MasjidConnectionSuburb {
  key: String
  connection: MasjidConnection
}

type MasjidConnectionUpdatedAt {
  key: DateTime
  connection: MasjidConnection
}

type MasjidConnectionZuhrAthaan {
  key: String
  connection: MasjidConnection
}

type MasjidConnectionZuhrAthaanSpecial {
  key: String
  connection: MasjidConnection
}

type MasjidConnectionZuhrLabelSpecial {
  key: String
  connection: MasjidConnection
}

type MasjidConnectionZuhrSalaah {
  key: String
  connection: MasjidConnection
}

type MasjidConnectionZuhrSalaahSpecial {
  key: String
  connection: MasjidConnection
}

type MasjidGroupBy {
  id: [MasjidConnectionId]
  _id: [MasjidConnection_id]
  createdAt: [MasjidConnectionCreatedAt]
  updatedAt: [MasjidConnectionUpdatedAt]
  Name: [MasjidConnectionName]
  Address: [MasjidConnectionAddress]
  area: [MasjidConnectionArea]
  Suburb: [MasjidConnectionSuburb]
  FajrAthaan: [MasjidConnectionFajrAthaan]
  FajrSalaah: [MasjidConnectionFajrSalaah]
  ZuhrAthaan: [MasjidConnectionZuhrAthaan]
  ZuhrSalaah: [MasjidConnectionZuhrSalaah]
  AsrAthaan: [MasjidConnectionAsrAthaan]
  AsrSalaah: [MasjidConnectionAsrSalaah]
  MaghribAthaan: [MasjidConnectionMaghribAthaan]
  MaghribSalaah: [MasjidConnectionMaghribSalaah]
  EshaAthaan: [MasjidConnectionEshaAthaan]
  EshaSalaah: [MasjidConnectionEshaSalaah]
  JummahAthaan: [MasjidConnectionJummahAthaan]
  JummahKhutbah: [MasjidConnectionJummahKhutbah]
  ZuhrAthaanSpecial: [MasjidConnectionZuhrAthaanSpecial]
  ZuhrSalaahSpecial: [MasjidConnectionZuhrSalaahSpecial]
  ZuhrLabelSpecial: [MasjidConnectionZuhrLabelSpecial]
  Notices: [MasjidConnectionNotices]
  PlusCode: [MasjidConnectionPlusCode]
}

input MasjidInput {
  Name: String!
  Address: String
  area: ID
  Suburb: String
  FajrAthaan: String
  FajrSalaah: String
  ZuhrAthaan: String
  ZuhrSalaah: String
  AsrAthaan: String
  AsrSalaah: String
  MaghribAthaan: String
  MaghribSalaah: String
  EshaAthaan: String
  EshaSalaah: String
  JummahAthaan: String
  JummahKhutbah: String
  ZuhrAthaanSpecial: String
  ZuhrSalaahSpecial: String
  ZuhrLabelSpecial: String
  Notices: String
  PlusCode: String
}

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | ForgotPassword | Area | AreaConnection | AreaAggregator | AreaGroupBy | AreaConnectionId | AreaConnection_id | AreaConnectionCreatedAt | AreaConnectionUpdatedAt | AreaConnectionName | createAreaPayload | updateAreaPayload | deleteAreaPayload | Masjid | MasjidConnection | MasjidAggregator | MasjidGroupBy | MasjidConnectionId | MasjidConnection_id | MasjidConnectionCreatedAt | MasjidConnectionUpdatedAt | MasjidConnectionName | MasjidConnectionAddress | MasjidConnectionArea | MasjidConnectionSuburb | MasjidConnectionFajrAthaan | MasjidConnectionFajrSalaah | MasjidConnectionZuhrAthaan | MasjidConnectionZuhrSalaah | MasjidConnectionAsrAthaan | MasjidConnectionAsrSalaah | MasjidConnectionMaghribAthaan | MasjidConnectionMaghribSalaah | MasjidConnectionEshaAthaan | MasjidConnectionEshaSalaah | MasjidConnectionJummahAthaan | MasjidConnectionJummahKhutbah | MasjidConnectionZuhrAthaanSpecial | MasjidConnectionZuhrSalaahSpecial | MasjidConnectionZuhrLabelSpecial | MasjidConnectionNotices | MasjidConnectionPlusCode | createMasjidPayload | updateMasjidPayload | deleteMasjidPayload | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileGroupBy | UploadFileConnectionId | UploadFileConnection_id | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UploadFileConnectionName | UploadFileConnectionHash | UploadFileConnectionSha256 | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | createFilePayload | updateFilePayload | deleteFilePayload | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionCreatedAt | UsersPermissionsRoleConnectionUpdatedAt | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionId | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionCreatedAt | UsersPermissionsUserConnectionUpdatedAt | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | createUserPayload | updateUserPayload | deleteUserPayload

type Mutation {
  createArea(input: createAreaInput): createAreaPayload
  updateArea(input: updateAreaInput): updateAreaPayload
  deleteArea(input: deleteAreaInput): deleteAreaPayload
  createMasjid(input: createMasjidInput): createMasjidPayload
  updateMasjid(input: updateMasjidInput): updateMasjidPayload
  deleteMasjid(input: deleteMasjidInput): deleteMasjidPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UserInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): ForgotPassword
  changePassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}

type Query {
  area(id: ID!): Area
  areas(sort: String, limit: Int, start: Int, where: JSON): [Area]
  areasConnection(sort: String, limit: Int, start: Int, where: JSON): AreaConnection
  masjid(id: ID!): Masjid
  masjids(sort: String, limit: Int, start: Int, where: JSON): [Masjid]
  masjidsConnection(sort: String, limit: Int, start: Int, where: JSON): MasjidConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

input updateAreaInput {
  where: InputID
  data: editAreaInput
}

type updateAreaPayload {
  area: Area
}

input updateFileInput {
  where: InputID
  data: editFileInput
}

type updateFilePayload {
  file: UploadFile
}

input updateMasjidInput {
  where: InputID
  data: editMasjidInput
}

type updateMasjidPayload {
  masjid: Masjid
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: Float!
  url: String!
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionSha256 {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUpdatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  _id: [UploadFileConnection_id]
  createdAt: [UploadFileConnectionCreatedAt]
  updatedAt: [UploadFileConnectionUpdatedAt]
  name: [UploadFileConnectionName]
  hash: [UploadFileConnectionHash]
  sha256: [UploadFileConnectionSha256]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String!
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionCreatedAt {
  key: DateTime
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionUpdatedAt {
  key: DateTime
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  _id: [UsersPermissionsRoleConnection_id]
  createdAt: [UsersPermissionsRoleConnectionCreatedAt]
  updatedAt: [UsersPermissionsRoleConnectionUpdatedAt]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreatedAt {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdatedAt {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  _id: [UsersPermissionsUserConnection_id]
  createdAt: [UsersPermissionsUserConnectionCreatedAt]
  updatedAt: [UsersPermissionsUserConnectionUpdatedAt]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}
